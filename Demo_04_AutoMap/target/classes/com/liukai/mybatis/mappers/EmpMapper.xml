<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liukai.mybatis.mappers.EmpMapper">

    <!--
    解决字段名和数据库名不一致问题
    1、列添加别名 ： select eid,emp_name as empName,age,sex,email from t_emp
    2、<settings>
        将 下划线映射成驼峰 emp_name——> empName
        <setting name="mapUnderscoreToCamelCase" value="true"/>
       </settings>
    3、通过ResultMap 自定义设置
    resultMap：设置自定义映射
               属性：
               id：表示自定义映射的唯一标识
               type：查询的数据要映射的实体类的类型
               子标签：
               id：设置主键的映射关系
               result：设置普通字段的映射关系
               association：设置多对一的映射关系
               collection：设置一对多的映射关系
               属性：
               property：设置映射关系中实体类中的属性名
               column：设置映射关系中表中的字段名
    -->
<!--    <select id="getAllEmp" resultType="Emp">
        select * from t_emp
    </select>-->
    <resultMap id="empResultMap" type="Emp">
        <id property="eid" column="eid"/>
        <id property="emp_name" column="empName"/>
        <id property="age" column="age"/>
        <id property="sex" column="sex"/>
        <id property="email" column="email"/>
    </resultMap>
    <select id="getAllEmp" resultMap="empResultMap">
        select * from t_emp
    </select>

<!-- 通过级联方式获取关联信息 处理多对一方法1  -->
<!--    <resultMap id="empDeptMap" type="Emp">
        <id column="eid" property="eid"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="sex" property="sex"/>
        <result column="did" property="dept.did"/>
        <result column="dept_name" property="dept.deptName"/>
    </resultMap>
    &lt;!&ndash;Emp getEmpAndDeptByEid(@Param("eid") int eid);&ndash;&gt;
    <select id="getEmpAndDeptByEid" resultMap="empDeptMap">
        select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did =
        dept.did where emp.eid = #{eid}
    </select>-->

<!--使用association处理映射关系  处理多对一方法2 -->
    <resultMap id="empDeptMap" type="Emp">
        <id column="eid" property="eid"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="sex" property="sex"/>
        <association property="dept" javaType="Dept">
            <id column="did" property="did"/>
            <result column="dept_name" property="deptName"/>
        </association>
    </resultMap>
    <!--Emp getEmpAndDeptByEid(@Param("eid") int eid);-->
    <select id="getEmpAndDeptByEid" resultMap="empDeptMap">
        select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did =
        dept.did where emp.eid = #{eid}
    </select>


    <resultMap id="empDeptStepMap" type="Emp">
        <id column="eid" property="eid"/>
        <result column="emp_name" property="empName"/>
        <result column="age" property="age"/>
        <result column="sex" property="sex"/>
    <!--
    select：设置分步查询，查询某个属性的值的sql的标识（namespace.sqlId）
    column：将sql以及查询结果中的某个字段设置为分步查询的条件
    fetchType: 当开启全球加载后，可通过此属性手动控制延迟加载的效果
               lazy :延迟
               eager:不延迟
    -->
        <association property="dept"
                     select="com.liukai.mybatis.mappers.DeptMapper.getEmpDeptByStep"
                     column="did"
                     fetchType="eager"
        >
        </association>
    </resultMap>
    <!--Emp getEmpByStep(@Param("eid") int eid);-->
    <select id="getEmpByStepOne" resultMap="empDeptStepMap">
        select * from t_emp where eid = #{eid}
    </select>

    <!--
    /**
     * 通过分步查询部门及部门所有员工信息
     * 分步查询第二步：根据did查询员工信息
     */
    List<Emp> getDeptAndEmpByStepTwo(@Param("did")Integer did);
    -->
    <select id="getDeptAndEmpByStepTwo" resultType="Emp">
        select * from t_emp where did=#{did}
    </select>




</mapper>